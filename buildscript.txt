-- use premake4/5 as build system.

//////////////////////
 add third party libs as submodules.
//////////////////////

- git submodule add https://github.com/twilight-taurus/bullet3 ./ThirdParty/bullet3
- git submodule add https://github.com/twilight-taurus/raylib ./ThirdParty/raylib
- git submodule add https://github.com/recp/cglm ./ThirdParty/cglm (might need to fork this)
- git submodule add https://github.com/tylov/STC ./ThirdParty/STC

//////////////////////
// build bullet3 /////
//////////////////////



### TODO: Fix bulletC_api.h/cpp . It was written using a 'tweaked' version of btDiscreteDynamicsWorld.cpp
### 'tweak' bullet3 source code if necessary.



rmdir /s /q ThirdPartyPull/bullet3/data
rmdir /s /q ThirdPartyPull/bullet3/docs
rmdir /s /q ThirdPartyPull/bullet3/examples
rmdir /s /q ThirdPartyPull/bullet3/test

rmdir /s /q ThirdPartyPull/bullet3/Bullet3OpenCL
rmdir /s /q ThirdPartyPull/bullet3/BulletInverseDynamics
rmdir /s /q ThirdPartyPull/bullet3/BulletSoftBody
rmdir /s /q ThirdPartyPull/bullet3/clew


// navigate to build folder of bullet3
- cd ThirdParty/bullet3/build3

- cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DOPENGL_VERSION=3.3 -DBUILD_UNIT_TESTS=OFF -DBUILD_CPU_DEMOS=OFF -DBUILD_ENET=OFF -DBUILD_CLSOCKET=OFF -DBUILD_OPENGL3_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF .
- cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DOPENGL_VERSION=3.3 -DBUILD_UNIT_TESTS=OFF -DBUILD_CPU_DEMOS=OFF -DBUILD_ENET=OFF -DBUILD_CLSOCKET=OFF -DBUILD_OPENGL3_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF .

// run premake4, depending on OS.
- premake4 --no-demos --no-clsocket --no-enet --no-gtest gmake (windows)
- ./premake4_linux(64) gmake        (linux)
- ./premake4_arm64 gmake            (android)
- ./premake4_osx(32) gmake          (macOS)

- cd gmake

- mingw32-make (or make)
    ( CC=C:\raylib\w64devkit\bin\gcc (or path/to/toolchain_binaries -- MinGW, GNU on Linux, macOS) )
    ( CXX=C:\raylib\w64devkit\bin\g++ )
    ( AR=C:\raylib\w64devkit\bin\ar )
        Bullet3Common
        Bullet3Geometry
        Bullet3Collision
        Bullet3Dynamics
        BulletDynamics
        BulletCollision
        LinearMath

// navigate to to bin output folder of bullet3
- cd ../../bin

// copy lib output to main library folder of project
// batch (windows)
- for /r %%a in (*_gmake.a) do xcopy "%%a" ..\..\..\lib\bullet3 /i
// cmd line (windows)
- for /r %a in (*_gmake.a) do xcopy "%a" ..\..\..\lib\bullet3 /i
// delete local output.
del *_gmake.a

// navigate back to root project path.
- cd ../../

///////////////
build raylib
///////////////
- cd ThirdParty/raylib
- mkdir build
- cd build

// make sure that bin directory of c/c++ toolchain is set to path.
// -- alternatively set CC, CXX variables for compiler path on command line.
- cmake -G "MinGW Makefiles" .. (windows)
- cmake -G "Unix Makefiles" .. (linux)
- cmake -G "Unix Makefiles" .. (macOS)

// flags.make causes error. try copying custom flags.make to build dir  before running next cmd.
- COPY /Y "..\..\..\makefix\flags.make" .\raylib\CMakeFiles\raylib.dir (windows)

- mingw32-make (or make )
- cd raylib
- COPY /Y libraylib.a ..\..\..\..\lib (windows)

// navigate back to root project path.
- cd ..\..\..\..\ (windows)

///////////////
build cglm
///////////////

- cd ThirdParty/cglm (windows)

- mkdir build (windows)
- cd build (windows)
- cmake -G "MinGW Makefiles" .. (Windows)
- cmake -G "Unix Makefiles" .. (Linux, macos)

- mingw32-make (windows)
- make (linux, macos)

COPY /Y libcglm.dll.a ..\..\..\lib (windows)
COPY /Y libcglm-0.dll ..\..\..\bin (windows)

// back to root directory
cd ../../../ (windows)

////////////////
STC - header-only library --> only include headers
supply headers to project repository in ThirdParty/STC
////////////////


////////////////
Nuklear - header-only library.
supply headers to project repository in ThirdParty/nuklear
////////////////


////////////////
build GLFW (built by raylib, not needed)
supply headers to project repository in ThirdParty/GLFW
////////////////


////////////////
build GLEW (needed for nuklear to work)
--> try using glad.h from raylib/src/external first.
////////////////

- cd ThirdPartyPull/glew/build/cmake
- mkdir build
- cd build

- cmake -G "MinGW Makefiles" -DBUILD_UTILS=OFF -DBUILD_FRAMEWORK=OFF .. (windows)
- cmake -G "Unix Makefiles" -DBUILD_UTILS=OFF -DBUILD_FRAMEWORK=OFF .. (linux, macos)

- mingw32-make / make

cd bin
COPY /Y glew32.dll ..\..\..\..\..\..\bin
cd ..\lib
COPY /Y libglew32.dll.a ..\..\..\..\..\..\lib

# go back to project root dir
cd ../../../../../../

# run the topmost makefile, building the project.
mingw32-make game / make game

////////////////
link system and opengl libraries. (in topmost project makefile)
////////////////

